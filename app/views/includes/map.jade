script.
    // This function returns the coordinate
    // conversion string in DD to DMS.
    function ddToDms (lat, lng) {
        var latResult = getDms(parseFloat(lat));
        latResult += (lat >= 0) ? ' N' : ' S';

        var lngResult = getDms(parseFloat(lng));
        lngResult += (lng >= 0) ? ' E' : ' W';
        return latResult + ' ' + lngResult;
    }

    function getDms (val) {
        var valDeg, valMin, valSec, result;
        val = Math.abs(val);

        valDeg = Math.floor(val);
        result = valDeg + "º";

        valMin = Math.floor((val - valDeg) * 60);
        result += valMin + "'";

        valSec = Math.round((val - valDeg - valMin / 60) * 3600 * 1000) / 1000;
        result += valSec + '"';

        return result;
    }
    window.onload = function () {
        loadMap(0);
    }
    function loadMap(routeIndex) {
        if(document.getElementById('mapcontainer') !== null) {
            document.getElementById('mapcontainer').innerHTML = "<div class='sidebar-map', id='map' style='width: 100%;'></div>";
        }
        var control1, control2, control3, control4, control5
        var baseLayer = L.tileLayer(
            'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://cloudmade.com">CloudMade</a>',
                maxZoom: 100
            }
        );
        //var heatmapLayer = new HeatmapOverlay(!{JSON.stringify(map.heatmapConfig)});
        var map = new L.Map('map', {
            center: new L.LatLng(!{map.config.center[0]}, !{map.config.center[1]}),
            zoom: !{map.config.zoom},
            zoomControl: !{map.config.zoomControl},
            layers: [baseLayer],
            scrollWheelZoom: !{map.config.scrollWheelZoom},
            minZoom: 0,
            maxZoom: 100
        });
        var greenIcon = L.icon({
            iconUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/Button_Icon_White.svg/1000px-Button_Icon_White.svg.png',

            iconSize: [6, 6], // size of the icon
            iconAnchor: [3, 3], // point of the icon which will correspond to marker's location
            popupAnchor: [0, 0] // point from which the popup should open relative to the iconAnchor
        });

        if ((!{hasRoute}) || (!{foundRoutes})) {
            // Display the route
            control1 = {
                fitSelectedRoutes: false,
                draggableWaypoints:false,
                addWaypoints:false,
                waypoints: [!{routeMaps[0].routeData.map(function(w) { return "L.latLng(" + w[1] + ", " + w[0] + ")";})}],
                router: L.Routing.mapbox("pk.eyJ1Ijoia3ZubWxyIiwiYSI6ImNqZmlobmwzcjAwazMycnJ6ejNoNmpmMDMifQ.5MzS02vStOXn_KoMOZ-wMw", {
                    profile: 'mapbox/cycling',

                }),
                routeWhileDragging: false,
                waypointMode: 'snap',
                lineOptions: {
                    styles: [{color: 'black', opacity: 0.5, weight: 9}, {color: '#ff7100', opacity: 1, weight: 6}, {color: 'red', opacity: 0 /*1*/, weight: 2}]
                },
                createMarker: function (i, wp) {
                    return L.marker(wp.latLng, {
                        draggable: false,
                        opacity: 1,
                        icon: greenIcon
                    });
                }
            };
            control2 = Object.assign({}, control1);
            control3 = Object.assign({}, control1);
            control4 = Object.assign({}, control1);
            control5 = Object.assign({}, control1);

            control2.waypoints = [!{routeMaps[1].routeData.map(function(w) { return "L.latLng(" + w[1] + ", " + w[0] + ")";})}]
            control3.waypoints = [!{routeMaps[2].routeData.map(function(w) { return "L.latLng(" + w[1] + ", " + w[0] + ")";})}]
            control4.waypoints = [!{routeMaps[3].routeData.map(function(w) { return "L.latLng(" + w[1] + ", " + w[0] + ")";})}]
            control5.waypoints = [!{routeMaps[4].routeData.map(function(w) { return "L.latLng(" + w[1] + ", " + w[0] + ")";})}]

            var control = [
                L.Routing.control(control1),
                L.Routing.control(control2),
                L.Routing.control(control3),
                L.Routing.control(control4),
                L.Routing.control(control5)
            ];

            //control.hide();
            let routeLayer = control[routeIndex];
            routeLayer.addTo(map);


            // Markers
            function onEachFeature(feature, layer) {
                if (feature.properties && feature.properties.popupContent) {
                    layer.bindPopup(feature.properties.popupContent);
                }
            };

            var states1 = [
                {
                    "type": "Feature",
                    "properties": {
                        "type": "start",
                        "popupContent": "This is the start point!"
                    },
                    "geometry": {
                        "type": "Point",
                        "coordinates": !{JSON.stringify(routeMaps[0].routeData[0])}
                    }
                },
                {
                    "type": "Feature",
                    "properties": {
                        "type": "end",
                        "popupContent": "This is the end point!"
                    },
                    "geometry": {
                        "type": "Point",
                        "coordinates": !{JSON.stringify(routeMaps[0].routeData[routeMaps[0].routeData.length-1])}
                    }
                }
            ];
            var states2 = [
                {
                    "type": "Feature",
                    "properties": {
                        "type": "start",
                        "popupContent": "This is the start point!"
                    },
                    "geometry": {
                        "type": "Point",
                        "coordinates": !{JSON.stringify(routeMaps[1].routeData[0])}
                    }
                },
                {
                    "type": "Feature",
                    "properties": {
                        "type": "end",
                        "popupContent": "This is the end point!"
                    },
                    "geometry": {
                        "type": "Point",
                        "coordinates": !{JSON.stringify(routeMaps[1].routeData[routeMaps[1].routeData.length - 1])}
                    }
                }
            ];
            var states3 = [
                {
                    "type": "Feature",
                    "properties": {
                        "type": "start",
                        "popupContent": "This is the start point!"
                    },
                    "geometry": {
                        "type": "Point",
                        "coordinates": !{JSON.stringify(routeMaps[2].routeData[0])}
                    }
                },
                {
                    "type": "Feature",
                    "properties": {
                        "type": "end",
                        "popupContent": "This is the end point!"
                    },
                    "geometry": {
                        "type": "Point",
                        "coordinates": !{JSON.stringify(routeMaps[2].routeData[routeMaps[2].routeData.length - 1])}
                    }
                }
            ];
            var states4 = [
                {
                    "type": "Feature",
                    "properties": {
                        "type": "start",
                        "popupContent": "This is the start point!"
                    },
                    "geometry": {
                        "type": "Point",
                        "coordinates": !{JSON.stringify(routeMaps[3].routeData[0])}
                    }
                },
                {
                    "type": "Feature",
                    "properties": {
                        "type": "end",
                        "popupContent": "This is the end point!"
                    },
                    "geometry": {
                        "type": "Point",
                        "coordinates": !{JSON.stringify(routeMaps[3].routeData[routeMaps[3].routeData.length - 1])}
                    }
                }
            ];
            var states5 = [
                {
                    "type": "Feature",
                    "properties": {
                        "type": "start",
                        "popupContent": "This is the start point!"
                    },
                    "geometry": {
                        "type": "Point",
                        "coordinates": !{JSON.stringify(routeMaps[4].routeData[0])}
                    }
                },
                {
                    "type": "Feature",
                    "properties": {
                        "type": "end",
                        "popupContent": "This is the end point!"
                    },
                    "geometry": {
                        "type": "Point",
                        "coordinates": !{JSON.stringify(routeMaps[4].routeData[routeMaps[4].routeData.length - 1])}
                    }
                }
            ];

            var route1 = [
                {
                    "type": "MultiLineString",
                    "coordinates": [!{JSON.stringify(routeMaps[0].routeData)}],
                    "properties": {
                        "type": "route"
                    }
                }
            ];
            var route2 = [
                {
                    "type": "MultiLineString",
                    "coordinates": [!{JSON.stringify(routeMaps[1].routeData)}],
                    "properties": {
                        "type": "route"
                    }
                }
            ];
            var route3 = [
                {
                    "type": "MultiLineString",
                    "coordinates": [!{JSON.stringify(routeMaps[2].routeData)}],
                    "properties": {
                        "type": "route"
                    }
                }
            ];
            var route4 = [
                {
                    "type": "MultiLineString",
                    "coordinates": [!{JSON.stringify(routeMaps[3].routeData)}],
                    "properties": {
                        "type": "route"
                    }
                }
            ];
            var route5 = [
                {
                    "type": "MultiLineString",
                    "coordinates": [!{JSON.stringify(routeMaps[4].routeData)}],
                    "properties": {
                        "type": "route"
                    }
                }
            ];

            var states = [states1,states2,states3,states4,states5]
            var route = [route1,route2,route3,route4,route5]

            var geojsonMarkerOptions = {
                radius: 6,
                fillColor: "#ff780000",
                color: "#000",
                weight: 5,
                opacity: 1,
                fillOpacity: 1
            };

            L.geoJSON(states[routeIndex], {
                onEachFeature: onEachFeature,
                style: function (feature) {
                    switch (feature.properties.type) {
                        case 'start':
                            geojsonMarkerOptions.color = "#ffffff";
                            geojsonMarkerOptions.radius = 12;
                            return geojsonMarkerOptions;
                        case 'end':
                            geojsonMarkerOptions.color = "#00FF00";
                            geojsonMarkerOptions.radius = 8;
                            return geojsonMarkerOptions;
                    }
                },
                pointToLayer: function (feature, latlng) {
                    return L.circleMarker(latlng, geojsonMarkerOptions);
                }
            }).addTo(map);

            var lineLayer = L.geoJSON(route[routeIndex], {
                "color": "#ffffff",
                "weight": 1,
                "opacity": 1
            }).addTo(map);
            map.fitBounds(lineLayer.getBounds());
        }


        var coverageLayer = new L.GridLayer.MaskCanvas(!{JSON.stringify(map.maskConfig)});
        coverageLayer.setData(!{JSON.stringify(map.heatmapData.data)});
        map.addLayer(coverageLayer);

        // Sidebar
        if (!(!{hasRoute})) {
            L.control.scale().addTo(map);
            L.control.sidebar('sidebar').addTo(map);
        }

        // Mouse coordinate capture
        var startPointLayer
        map.on('click', function (obj) {
             if (obj.latlng && !(!{hasRoute})) {
                var states = [
                    {
                        "type": "Feature",
                        "properties": {
                            "type": "start",
                            "popupContent": "This is the start point!"
                        },
                        "geometry": {
                            "type": "Point",
                            "coordinates": [obj.latlng.lng.toFixed(4).toString(), obj.latlng.lat.toFixed(4).toString()]
                        }
                    }];

                var geojsonMarkerOptions = {
                    radius: 8,
                    fillColor: "#ff780000",
                    color: "#000",
                    weight: 5,
                    opacity: 1,
                    fillOpacity: 0.8
                };
                if (startPointLayer) {
                    map.removeLayer(startPointLayer)

                }
                startPointLayer = L.geoJSON(states, {
                    onEachFeature: onEachFeature,
                    style: function (feature) {
                        geojsonMarkerOptions.color = "#ff7100"
                        return geojsonMarkerOptions;
                    },
                    pointToLayer: function (feature, latlng) {
                        return L.circleMarker(latlng, geojsonMarkerOptions);
                    }
                });
                startPointLayer.addTo(map);


                document.getElementById('input-lat').value = obj.latlng.lat.toFixed(4).toString();
                document.getElementById('input-lng').value = obj.latlng.lng.toFixed(4).toString();
                document.getElementById('gps-calculated').innerText =
                    ddToDms(document.getElementById('input-lat').value = obj.latlng.lat.toFixed(4).toString(),
                        document.getElementById('input-lng').value = obj.latlng.lng.toFixed(4).toString());
            }
        })
    };